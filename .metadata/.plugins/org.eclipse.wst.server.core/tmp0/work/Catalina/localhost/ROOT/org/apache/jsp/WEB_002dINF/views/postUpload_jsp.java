/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-08-18 08:52:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class postUpload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"EUC-KR\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.1.0.min.js\"></script>\n");
      out.write("<script>\n");
      out.write("\t$(function(){\n");
      out.write("\t\tvar url=\"tag\";\n");
      out.write("\t\t$.ajax({\n");
      out.write("\t\t\ttype:\"post\"\n");
      out.write("\t\t\t,url:url\t\t\n");
      out.write("\t\t\t,dataType:\"json\" })\n");
      out.write("\t\t\t.done(function(args){\t//응답이 성공 상태 코드를 반환하면 호출되는 함수\n");
      out.write("\t\t\t \tfor(var i=0; i < args.length; i++) {\n");
      out.write("\t\t\t\t \t$(\"#tag\").append(\"<option value='\"+args[i].no+\"'>\"+args[i].name+\"</option>\");\n");
      out.write("\t\t\t \t}\n");
      out.write(" \t\t\t\t})\n");
      out.write("\t    \t.fail(function(e) {\n");
      out.write("\t\t    \talert(e.responseText);\n");
      out.write("\t    })\n");
      out.write("});//ready 끝\n");
      out.write("\n");
      out.write("function selectTag(){\n");
      out.write("\tvar tagno=$(\"#tag\").val();\n");
      out.write("\t\n");
      out.write("\tif(tagno==\"\") {\t                \n");
      out.write("\t\t$(\"#subtag option\").each(function() {\t\n");
      out.write("\t\t\t$(\"#subtag option:eq(1)\").remove();\t\n");
      out.write("\t\t});\n");
      out.write("\t\treturn;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tvar url=\"subtag\";\n");
      out.write("\tvar params=\"tagno=\"+tagno;\n");
      out.write("\t\n");
      out.write("\t$.ajax({\n");
      out.write("\t\ttype:\"post\"\n");
      out.write("\t\t,url:url\t\n");
      out.write("\t\t,data:params\n");
      out.write("\t\t,dataType:\"json\"})\n");
      out.write("\t\t.done(function(args){\n");
      out.write("\t\t\t$(\"#subtag option\").each(function() {\t\n");
      out.write("\t\t\t\t$(\"#subtag option:eq(0)\").remove();\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\t\t\t for(var idx=0; idx<args.length; idx++) {\t\n");
      out.write("\t\t\t\t $(\"#subtag\").append(\"<option value='\"+args[idx].no+\"'>\"+args[idx].name+\"</option>\");\t\n");
      out.write("\t\t\t } \n");
      out.write("\t\t})\n");
      out.write("\t    .fail(function(e) {\n");
      out.write("\t    \talert(e.responseText);\n");
      out.write("\t    });\t\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("<form action=\"insertPost\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("\ttest user id : <input name=\"user_id\">\n");
      out.write("\t<select id=\"tag\" name=\"category_first\" onchange=\"selectTag()\">\n");
      out.write("  \t\t<option value=\"\">::대분류::</option>\n");
      out.write("\t</select>\n");
      out.write("\t<select id=\"subtag\" name=\"category_second\">\n");
      out.write("  \t\t<option value=\"\">::소분류::</option>\n");
      out.write("\t</select>\n");
      out.write("\t\t\n");
      out.write("\tthumbnail : <input type=\"file\" name=\"report\" method=\"post\" >\n");
      out.write("\ttitle : <input type=\"text\" name=\"title\">\n");
      out.write("\tdesc : <input type=\"text\" name=\"description\">\n");
      out.write("\tprice : <input type=\"nubmer\" name=\"price\">\n");
      out.write("\tworktime : <input type=\"number\" name=\"worktime\"> 일 수 미입력시 기본 14일 \n");
      out.write("\tretouch : <input type=\"number\" name=\"retouch_count\">\n");
      out.write("\tserv description : <input type=\"text\" name=\"service_description\">\n");
      out.write("\t요구사항 : <input type=\"text\" name=\"requirement\">\n");
      out.write("\t\n");
      out.write("\t<input type=\"submit\" value=\"전송\">\n");
      out.write("\t<input type=\"reset\" value=\"초기화\">\n");
      out.write("</form>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-08-11 02:20:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1568257586097L));
    _jspx_dependants.put("jar:file:/C:/Users/asd35/Documents/GitHub/woongs/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/woongs/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<a href=\"register\">회원가입</a>\r\n");
      out.write("<a href=\"login\">로그인</a>\r\n");
      out.write("<a href=\"find\">비밀번호 찾기</a>\r\n");
      out.write("<a href=\"upload\"> 업로드 페이지</a>\r\n");
      out.write("<a href=\"myPage\"> 마이 페이지</a>\r\n");
      out.write("\r\n");
      out.write("관리자 아이디로 로그인했다면 쿠폰발행 페이지로 링크\r\n");
      out.write("<a href=\"coupon\"> 쿠폰 발행 페이지 (관리자)</a>\r\n");
      out.write("사용자 아이디로 로그인했다면 쿠폰확인 페이지로 링크\r\n");
      out.write("<a href=\"coupon\"> 쿠폰 확인/등록 페이지 (사용자)</a>\r\n");
      out.write("<a href=\"login\"> 로그인 </a>\r\n");
      out.write("<img src=\"resources/Images/test.jpg\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.1.0.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\ttype:\"post\"\r\n");
      out.write("\t\t,url:\"tag\"\t\t\r\n");
      out.write("\t\t,dataType:\"json\" })\r\n");
      out.write("\t\t.done(function(args){\t//응답이 성공 상태 코드를 반환하면 호출되는 함수\r\n");
      out.write("\t\t \tfor(var i=0; i < args.length; i++) {\r\n");
      out.write("\t\t\t \t$(\"#tag\").append(\"<a href='category?no=\"+args[i].no+\"'>\"+args[i].name+\"</option>\");\r\n");
      out.write("\t\t\t \t$(\"#cate\").after(\"<div id='\"+args[i].no+\"'>\"+args[i].name+\"</div>\");\r\n");
      out.write("\t\t \t}\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("    \t.fail(function(e) {\r\n");
      out.write("\t    \talert(e.responseText);\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    console.log(\"ajax 끝\");\r\n");
      out.write("\tafterAjax();\r\n");
      out.write("});//ready 끝\r\n");
      out.write("\r\n");
      out.write("function afterAjax() {\r\n");
      out.write("\tconsole.log(\"함수 호출\");\r\n");
      out.write("\t\r\n");
      out.write("    $.ajax({\r\n");
      out.write("\t\ttype:\"post\"\r\n");
      out.write("\t\t,url:\"post\"\t\t\r\n");
      out.write("\t\t,dataType:\"json\" })\r\n");
      out.write("\t\t.done(function(args){\t//응답이 성공 상태 코드를 반환하면 호출되는 함수\r\n");
      out.write("\t\t \tfor(var i=0; i < args.length; i++) {\r\n");
      out.write("\t\t\t \tconsole.log(args[i].category_first);\r\n");
      out.write("\t\t\t \t$(\"#\"+args[i].category_first).after(\"<div id='\"+args[i].no+\"'><img src=\"+args[i].thumbnail+\">\"+args[i].title+\"</div>\");\r\n");
      out.write("\t\t \t}\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("    \t.fail(function(e) {\r\n");
      out.write("\t    \talert(e.responseText);\r\n");
      out.write("    })\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<h2>카테고리 모음</h2>\r\n");
      out.write("<div id=\"tag\"></div>\r\n");
      out.write("<div id=\"cate\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

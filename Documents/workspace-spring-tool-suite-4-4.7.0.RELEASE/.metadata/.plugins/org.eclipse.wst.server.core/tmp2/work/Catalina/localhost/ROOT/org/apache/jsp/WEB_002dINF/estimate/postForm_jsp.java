/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-08-18 15:39:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.estimate;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import spring.model.EstimateDto;

public final class postForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/Users/gusql/Documents/workspace-spring-tool-suite-4-4.7.0.RELEASE/.metadata/.plugins/org.eclipse.wst.server.core/tmp2/wtpwebapps/tag/WEB-INF/lib/spring-webmvc-4.3.27.RELEASE.jar!/META-INF/spring-form.tld", Long.valueOf(1588032890000L));
    _jspx_dependants.put("jar:file:/C:/Users/gusql/Documents/workspace-spring-tool-suite-4-4.7.0.RELEASE/.metadata/.plugins/org.eclipse.wst.server.core/tmp2/wtpwebapps/tag/WEB-INF/lib/spring-webmvc-4.3.27.RELEASE.jar!/META-INF/spring.tld", Long.valueOf(1588032890000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-4.3.27.RELEASE.jar", Long.valueOf(1596332405747L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("spring.model.EstimateDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>게시물</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.1.0.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t$(function() {\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar url = \"tags\";\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\ttype : \"post\",\r\n");
      out.write("\t\t\t\turl : url,\r\n");
      out.write("\t\t\t\tdataType : \"json\"\r\n");
      out.write("\t\t\t}).done(\r\n");
      out.write("\t\t\t\t\tfunction(args) { //응답이 성공 상태 코드를 반환하면 호출되는 함수\r\n");
      out.write("\t\t\t\t\t\tfor (var i = 0; i < args.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#tag\").append(\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\"<option value='\"+args[i].no+\"'>\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t+ args[i].name + \"</option>\");\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}).fail(function(e) {\r\n");
      out.write("\t\t\t\talert(e.responseText);\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t});//ready 끝\r\n");
      out.write("\t\t//상위 카테고리 선택\r\n");
      out.write("\t\tfunction selectTag() {\r\n");
      out.write("\t\t\tvar tag_num = $(\"#tag\").val();\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (tag_num == 0) {\r\n");
      out.write("\t\t\t\t$(\"#sub_tag option\").each(function() {\r\n");
      out.write("\t\t\t\t\t$(\"#sub_tag option:eq(1)\").remove();\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t//하위 카테고리 선택\r\n");
      out.write("\t\t\tvar url = \"sub_tags\";\r\n");
      out.write("\t\t\tvar params = \"no=\" + tag_no;\r\n");
      out.write("\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\ttype : \"post\",\r\n");
      out.write("\t\t\t\turl : url,\r\n");
      out.write("\t\t\t\tdata : params,\r\n");
      out.write("\t\t\t\tdataType : \"json\"\r\n");
      out.write("\t\t\t}).done(\r\n");
      out.write("\t\t\t\t\tfunction(args) {\r\n");
      out.write("\t\t\t\t\t\t$(\"#sub_tag option\").each(function() {\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#sub_tag option:eq(0)\").remove();\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t$(\"#sub_tag\").append(\r\n");
      out.write("\t\t\t\t\t\t\t\t\"<option value=''>::하위카테고리::</option>\");\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tfor (var idx = 0; idx < args.length; idx++) {\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#sub_tag\").append(\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\"<option id = 'sub_tag' value='\"+args[idx].no+\"'>\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t+ args[idx].name + \"</option>\");\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}).fail(function(e) {\r\n");
      out.write("\t\t\t\talert(e.responseText);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<ol>\r\n");
      out.write("\t\t\t<li><a href=\"/insertTagForm\">기본 정보</a></li>\r\n");
      out.write("\t\t\t<li><a href=\"/infoForm\">가격 설정</a></li>\r\n");
      out.write("\t\t\t<li><a href=\"/serviceForm\">서비스 설명</a></li>\r\n");
      out.write("\t\t\t<li><a href=\"/imageForm\">이미지</a></li>\r\n");
      out.write("\t\t\t<li><a href=\"/equirementForm\">요청 사항</a></li>\r\n");
      out.write("\t\t</ol>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<form action=\"/tag\" method=\"post\">\r\n");
      out.write("\t\t<select id=\"tag\" onchange=\"selectTag()\" name=\"tag\">\r\n");
      out.write("\t\t\t<option value=\"\">::상위카테고리::</option>\r\n");
      out.write("\t\t</select> <br> <select id=\"sub_tag\" name=\"sub_tag\">\r\n");
      out.write("\t\t</select> <br> <br> <input type=\"text\" placeholder=\"제목\" name=\"title\"><br>\r\n");
      out.write("\t\t<input type=\"text\" placeholder=\"설명\" name=\"description\"><br>\r\n");
      out.write("\t\t<input type=\"text\" placeholder=\"금액\" name=\"price\"><br> <input\r\n");
      out.write("\t\t\ttype=\"text\" placeholder=\"작업기간\" name=\"worktime\"><br> <input\r\n");
      out.write("\t\t\ttype=\"text\" placeholder=\"수정횟수\" name=\"retouch_count\"><br>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<input type=\"text\" placeholder=\"날짜\" name=\"day\">\r\n");
      out.write("\t\t<br> <input type=\"submit\" value=\"저장\">\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-08-26 00:44:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class wishlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"EUC-KR\">\n");
      out.write("<title>찜한 목록</title>\n");
      out.write("<style>\n");
      out.write("  table {\n");
      out.write("    width: 100%;\n");
      out.write("    border-top: 1px solid #444444;\n");
      out.write("    border-collapse: collapse;\n");
      out.write("  }\n");
      out.write("  th, td {\n");
      out.write("    border-bottom: 1px solid #444444;\n");
      out.write("    padding: 10px;\n");
      out.write("  }\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.1.0.min.js\"></script>\n");
      out.write("<script>\n");
      out.write("\t$(function() {\n");
      out.write("\t\t$.ajax({\n");
      out.write("\t\t\t\ttype : \"post\",\n");
      out.write("\t\t\t\turl : \"wishList\",\n");
      out.write("\t\t\t\tdataType : \"json\"\n");
      out.write("\t\t\t\t})\n");
      out.write("\t\t\t\t.done(\n");
      out.write("\t\t\t\t\tfunction(args) {\n");
      out.write("\t\t\t\t\t\tconsole.log(args.length);\n");
      out.write("\t\t\t\t\t\tfor (var i = 0; i < args.length; i++) {\n");
      out.write("\t\t\t\t\t\t\t$(\"#wishList\")\n");
      out.write("\t\t\t\t\t\t\t\t\t.append(\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\"<input type='checkbox'name='report' value='\"+args[i].no+\"'/><a class='asdf' href='cate?=\"\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ args[i].no\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"'>상품이름 :\"\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ args[i].title\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"작업자 : \"\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ args[i].user_id\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"가격 :\" \n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ args[i].price\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+\"</a><br>\");\n");
      out.write("\t\t\t\t\t\t/* \t\t$(\"#wishList\").append(\"<td><input type='checkbox' name='report' value='\" + args[i].no+ '\" /> <a class=\"asdf\" href=\"cate?=\"'\n");
      out.write("\t\t\t\t\t\t\t\t\t\t+ args[i].no + '\">상품이름 :\"'+ args[i].title + \"작업자 : \" + args[i].user_id\t+ \"가격 :\" \n");
      out.write("\t\t\t\t\t\t\t\t\t\t+ args[i].price +\"</a><br></td>\"); */\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}).fail(function(e) {\n");
      out.write("\t\t\t\t\talert(e.responseText);\n");
      out.write("\t\t\t\t})\n");
      out.write("\t\tconsole.log(\"ajax 끝\");\n");
      out.write("\t});\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\t<form action=\"deleteCart\">\n");
      out.write("\t\t<input type=\"submit\" value=\"삭제\" />\n");
      out.write("\t\t<div id=\"wishList\"></div>\n");
      out.write("\t</form>\n");
      out.write("\t\n");
      out.write("\t<div>\n");
      out.write("\t\t<div class='ty-mainbox-cart__body'>\n");
      out.write("\t\t\t<div id=\"cart_items\">\n");
      out.write("\t\t\t\t<table class=\"ty-cart-content\">\n");
      out.write("\t\t\t\t\t<thead>\n");
      out.write("\t\t\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t\t\t<th class=\"cart-content\">&nbsp;</th>\n");
      out.write("\t\t\t\t\t\t\t<th class=\"cart-content\">상품</th>\n");
      out.write("\t\t\t\t\t\t\t<th class=\"cart-content\">작업자</th>\n");
      out.write("\t\t\t\t\t\t\t<th class=\"cart-content\">가격</th>\n");
      out.write("\t\t\t\t\t\t\t<th class=\"cart-content\">총 금액</th>\n");
      out.write("\t\t\t\t\t\t</tr>\t\n");
      out.write("\t\t\t\t\t</thead>\n");
      out.write("\t\t\t\t</table>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
